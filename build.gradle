apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'idea'

defaultTasks 'clean', 'build'

version = '0.1'
group = 'com.mapvine'
ext.archivesBaseName = 'gops'
ext.isSnapshot = version.endsWith("-SNAPSHOT")

repositories {
    mavenLocal()
    mavenCentral()
    // for spock
    mavenRepo url: 'http://oss.sonatype.org/content/repositories/snapshots/'
}

sourceSets.main.groovy.srcDirs = ["src/main/groovy"]

idea.module {
    ext.gradleCacheVariable = 'GRADLE_CACHE'
    ext.downloadJavadoc = true
}

idea.project {
    ext.jdkName = '1.7'
    ext.wildcards = ['!?*.java', '!?*.groovy']
}

ext.groovy = "org.codehaus.groovy:groovy-all:2.1.0"
ext.junit = 'junit:junit:4.10'
ext.spock = "org.spockframework:spock-core:0.7-groovy-2.0"

dependencies {
    groovy groovy
    compile groovy
    testCompile junit
    testCompile spock
}

idea.module {
    ext.gradleCacheVariable = 'GRADLE_CACHE'
    downloadJavadoc = true
    ext.downloadSource = true
    outputDir = file("intellij/out")
    testOutputDir = file("intellij/testOut")
}

idea.project.ipr.withXml { provider ->
    def node = provider.asNode()
    // Use git
    def vcsConfig = node.component.find { it.'@name' == 'VcsDirectoryMappings' }
    vcsConfig.mapping[0].'@vcs' = 'Git'

    // Set gradle home
    def gradleSettings = node.appendNode('component', [name: 'GradleSettings'])
    gradleSettings.appendNode('option', [name: 'SDK_HOME', value: gradle.gradleHomeDir.absolutePath])
}

task sourceJar(type: Jar) {
    description = 'An archive of the source code for Maven Central'
    classifier = 'sources'
    from sourceSets.main.groovy
}

task groovydocJar(type: Jar) {
    description = 'An archive of the GroovyDocs for Maven Central'
    classifier = 'javadoc'
    from groovydoc
}

task testJar(type: Jar, dependsOn: testClasses) {
    baseName = "test-${project.archivesBaseName}"
    from sourceSets.test.output
}

configurations {
    tests
}

artifacts {
    tests testJar
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.3'
}

artifacts {
    archives groovydocJar, sourceJar
}

signing {
    sign configurations.archives
}

// Only *require* signing if we are uploading a non snapshot version
gradle.taskGraph.whenReady { taskGraph ->
    tasks.withType(org.gradle.plugins.signing.Sign).all {
        required = taskGraph.hasTask(":uploadArchives") && !isSnapshot
    }
}

install.repositories.mavenInstaller {
    pom.project(pomConfiguration)
    if (signing.signatory) {
        beforeDeployment { signing.signPom(it) }
    }
}

uploadArchives {
    repositories.mavenDeployer {
        if (signing.signatory) {
            beforeDeployment { signPom(it) }
        }
        name = 'mavenCentralReleaseDeployer'
        repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
            authentication(userName: System.properties['mavenCentralUsername'], password: System.properties['mavenCentralPassword'])
            releases(updatePolicy: 'always')
            snapshots(updatePolicy: 'always')
        }
        pom.project(pomConfiguration)
    }
}

/**
 * Create POM config and return for use by other tasks.
 */
def getPomConfiguration() {
    return {
        name 'gops'
        packaging 'jar'
        description 'Options and other neat idioms for Groovy and Java'
        url 'https://github.com/Mapvine/gops'
        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution 'repo'
            }
        }
        developers {
            developer {
                id 'johnnywey'
                name 'Johnny Wey'
                email 'johnny@mapvine.com'
            }
            developer {
                id 'eriwen'
                name 'Eric Wendelin'
                email 'eric@mapvine.com'
            }
        }
        scm {
            connection 'scm:https://github.com/Mapvine/gops'
            developerConnection 'scm:git@github.com:Mapvine/gops.git'
            url 'https://github.com/Mapvine/gops'
        }
    }
}

